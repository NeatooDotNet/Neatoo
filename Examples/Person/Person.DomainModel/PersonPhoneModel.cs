using Neatoo;
using Neatoo.RemoteFactory;
using Neatoo.Rules;
using Person.Ef;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Person.DomainModel
{
    public enum PhoneType
    {
        Home,
        Work,
        Mobile
    }

    public partial interface IPersonPhoneModel : IIdEditBase
    {
        // Not Empty - Properties auto-generated by BaseGenerator (Roslyn)
        IPersonModel? ParentPersonModel { get; }

    }

    [Factory]
    internal partial class PersonPhoneModel : IdEditBase<PersonPhoneModel>, IPersonPhoneModel
    {
        public PersonPhoneModel([Service] IUniquePhoneRule uniquePhoneRule,
            [Service] IEditBaseServices<PersonPhoneModel> services) : base(services)
        {

            RuleManager.AddRule(uniquePhoneRule);
        }

        [Required]
        public partial PhoneType? PhoneType { get; set; }

        [Required]
        public partial string? PhoneNumber { get; set; }

        public IPersonModel? ParentPersonModel => this.Parent as IPersonModel;

        public partial void MapFrom(PersonPhoneEntity personPhoneEntity);
        public partial void MapTo(PersonPhoneEntity personPhoneEntity);

        [Create]
        public Task Create()
        {
            return RunAllRules();
        }

        [Fetch]
        public void Fetch(PersonPhoneEntity personPhoneEntity)
        {
            MapFrom(personPhoneEntity);
        }

        [Insert]
        [Update]
        public void Update(PersonPhoneEntity personPhoneEntity)
        {
            MapTo(personPhoneEntity);

            if(Id == null)
            {
                personPhoneEntity.PropertyChanged += HandleIdPropertyChanged;
            }
        }
    }

    public interface IPersonPhoneModelList : IEditListBase<IPersonPhoneModel>
    {
        Task<IPersonPhoneModel> AddPhoneNumber();
        void RemovePhoneNumber(IPersonPhoneModel personPhoneModel);
    }

    [Factory]
    internal class PersonPhoneModelList : EditListBase<IPersonPhoneModel>, IPersonPhoneModelList
    {
        private readonly IPersonPhoneModelFactory personPhoneModelFactory;

        public PersonPhoneModelList([Service] IPersonPhoneModelFactory personPhoneModelFactory)
        {
            this.personPhoneModelFactory = personPhoneModelFactory;
        }

        public async Task<IPersonPhoneModel> AddPhoneNumber()
        {
            var personPhoneModel = await personPhoneModelFactory.Create();
            Add(personPhoneModel);
            return personPhoneModel;
        }

        public void RemovePhoneNumber(IPersonPhoneModel personPhoneModel)
        {
            this.Remove(personPhoneModel);
        }

        [Fetch]
        public void Fetch(IEnumerable<PersonPhoneEntity> personPhoneEntities,
                            [Service] IPersonPhoneModelFactory personPhoneModelFactory)
        {
            foreach (var personPhoneEntity in personPhoneEntities)
            {
                var personPhoneModel = personPhoneModelFactory.Fetch(personPhoneEntity);
                this.Add(personPhoneModel);
            }
        }

        [Update]
        public void Update(ICollection<PersonPhoneEntity> personPhoneEntities,
                            [Service] IPersonPhoneModelFactory personPhoneModelFactory)
        {
            foreach (var personPhoneModel in this.Union(DeletedList))
            {
                PersonPhoneEntity? personPhoneEntity = null;

                if (personPhoneModel.Id.HasValue)
                {
                    personPhoneEntity = personPhoneEntities.Single(x => x.Id == personPhoneModel.Id);
                }
                else
                {
                    personPhoneEntity = new PersonPhoneEntity();
                    personPhoneEntities.Add(personPhoneEntity);
                }

                if (personPhoneModel.IsDeleted)
                {
                    personPhoneEntities.Remove(personPhoneEntity);
                }
                else
                {
                    personPhoneModelFactory.Save(personPhoneModel, personPhoneEntity);
                }
            }
        }
    }

    internal interface IUniquePhoneRule : IRule<IPersonPhoneModel>
    {

    }

    internal class UniquePhoneRule : RuleBase<IPersonPhoneModel>, IUniquePhoneRule
    {
        public UniquePhoneRule()
        {
            AddTriggerProperties(p => p.PhoneType, p => p.PhoneNumber);
        }

        protected override IRuleMessages Execute(IPersonPhoneModel target)
        {
            return RuleMessages.If(target.ParentPersonModel == null, nameof(IPersonPhoneModel.PhoneType), "Parent is null")
                .If(target.ParentPersonModel == null, nameof(IPersonPhoneModel.PhoneNumber), "Parent is null")
                .ElseIf(() => target.ParentPersonModel!.PersonPhoneModelList
                            .Where(c => c != target)
                            .Any(c => c.PhoneType == target.PhoneType), nameof(IPersonPhoneModel.PhoneType), "Phone type must be unique")
                .ElseIf(() => target.ParentPersonModel!.PersonPhoneModelList
                            .Where(c => c != target)
                            .Any(c => c.PhoneNumber == target.PhoneNumber), nameof(IPersonPhoneModel.PhoneNumber), "Phone number must be unique");
        }
    }
}
