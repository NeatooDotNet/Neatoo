using Neatoo;
using Neatoo.RemoteFactory;
using Person.Ef;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Person.DomainModel
{

    public partial interface IPersonPhoneModel : IEditBase
    {
        // Not Empty - Properties auto-generated by BaseGenerator (Roslyn)
    }

    [Factory]
    internal partial class PersonPhoneModel : EditBase<PersonPhoneModel>, IPersonPhoneModel
    {
        public PersonPhoneModel([Service] IEditBaseServices<PersonPhoneModel> services) : base(services)
        {

        }
        public partial int? Id { get; set; }

        [Required]
        public partial string? PhoneNumber { get; set; }

        public partial void MapFrom(PersonPhoneEntity personPhoneEntity);
        public partial void MapTo(PersonPhoneEntity personPhoneEntity);

        [Create]
        public Task Create()
        {
            return RunAllRules();
        }

        [Fetch]
        public void Fetch(PersonPhoneEntity personPhoneEntity)
        {
            MapFrom(personPhoneEntity);
        }

        [Insert]
        [Update]
        public void Update(PersonPhoneEntity personPhoneEntity)
        {
            MapTo(personPhoneEntity);
        }

        [Delete]
        public void Delete(PersonPhoneEntity personPhoneEntity, [Service] IPersonContext personContext)
        {
            personContext.PersonPhones.Remove(personPhoneEntity);
        }
    }

    public interface IPersonPhoneModelList : IEditListBase<IPersonPhoneModel>
    {
        Task<IPersonPhoneModel> AddPhoneNumber();
        void RemovePhoneNumber(IPersonPhoneModel personPhoneModel);
    }

    [Factory]
    internal class PersonPhoneModelList : EditListBase<IPersonPhoneModel>, IPersonPhoneModelList
    {
        private readonly IPersonPhoneModelFactory personPhoneModelFactory;

        public PersonPhoneModelList([Service] IPersonPhoneModelFactory personPhoneModelFactory)
        {
            this.personPhoneModelFactory = personPhoneModelFactory;
        }

        public async Task<IPersonPhoneModel> AddPhoneNumber()
        {
            var personPhoneModel = await personPhoneModelFactory.Create();
            Add(personPhoneModel);
            return personPhoneModel;
        }
        public void RemovePhoneNumber(IPersonPhoneModel personPhoneModel)
        {
            this.Remove(personPhoneModel);
        }

        [Fetch]
        public void Fetch(IEnumerable<PersonPhoneEntity> personPhoneEntities,
                            [Service] IPersonPhoneModelFactory personPhoneModelFactory)
        {
            foreach (var personPhoneEntity in personPhoneEntities)
            {
                var personPhoneModel = personPhoneModelFactory.Fetch(personPhoneEntity);
                this.Add(personPhoneModel);
            }
        }

        [Update]
        public void Update(ICollection<PersonPhoneEntity> personPhoneEntities,
                            [Service] IPersonPhoneModelFactory personPhoneModelFactory)
        {
            foreach (var personPhoneModel in this.Union(DeletedList))
            {
                PersonPhoneEntity? personPhoneEntity = null;

                if (personPhoneModel.Id.HasValue)
                {
                    personPhoneEntity = personPhoneEntities.Single(x => x.Id == personPhoneModel.Id);
                }
                else
                {
                    personPhoneEntity = new PersonPhoneEntity();
                    personPhoneEntities.Add(personPhoneEntity);
                }
                personPhoneModelFactory.Save(personPhoneModel, personPhoneEntity);
            }
        }
    }
}
