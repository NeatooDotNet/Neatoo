using Microsoft.EntityFrameworkCore;
using Neatoo;
using Neatoo.RemoteFactory;
using Neatoo.Rules.Rules;
using Person.Ef;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace Person.DomainModel;

public partial interface IPersonModel : IIdEditBase
{
    // Not Empty - Properties auto-generated by BaseGenerator (Roslyn)
}

[Factory]
[Authorize<IPersonModelAuth>]
internal partial class PersonModel : IdEditBase<PersonModel>, IPersonModel
{
    public PersonModel(IEditBaseServices<PersonModel> editBaseServices,
        [Service] IUniqueNameRule uniqueNameRule) : base(editBaseServices)
    {
        RuleManager.AddRule(uniqueNameRule);
    }

    [DisplayName("First Name*")]
    [Required(ErrorMessage = "First Name is required")]
    public partial string? FirstName { get; set; }

    [DisplayName("Last Name*")]
    [Required(ErrorMessage = "Last Name is required")]
    public partial string? LastName { get; set; }

    [DisplayName("Email Address")]
    public partial string? Email { get; set; }

    [DisplayName("Notes")]
    public partial string? Notes { get; set; }

    public partial IPersonPhoneModelList PersonPhoneModelList { get; set; }

    public partial void MapFrom(PersonEntity personEntity);
    public partial void MapTo(PersonEntity personEntity);
    public partial void MapModifiedTo(PersonEntity personEntity);

    [Create]
    public void Create([Service] IPersonPhoneModelList personPhoneModelList)
    {
        PersonPhoneModelList = personPhoneModelList;
    }

    [Remote]
    [Fetch]
    public async Task<bool> Fetch([Service] IPersonContext personContext,
                                    [Service] IPersonPhoneModelListFactory personPhoneModelListFactory)
    {
        var personEntity = await personContext.Persons.FirstOrDefaultAsync();
        if (personEntity == null)
        {
            return false;
        }
        this.MapFrom(personEntity);
        this.PersonPhoneModelList = personPhoneModelListFactory.Fetch(personEntity.Phones);
        return true;
    }

    [Remote]
    [Insert]
    public async Task<PersonEntity?> Insert([Service] IPersonContext personContext,
                                    [Service] IPersonPhoneModelListFactory personPhoneModelListFactory)
    {
        await RunRules();

        if(!this.IsSavable)
        {
            return null;
        }

        var personEntity = new PersonEntity();
        personContext.Persons.Add(personEntity);
        this.MapTo(personEntity);
        personPhoneModelListFactory.Save(this.PersonPhoneModelList, personEntity.Phones);

        personEntity.PropertyChanged += HandleIdPropertyChanged;

        await personContext.SaveChangesAsync();
        return personEntity;
    }

    [Remote]
    [Update]
    public async Task<PersonEntity?> Update([Service] IPersonContext personContext,
                                    [Service] IPersonPhoneModelListFactory personPhoneModelListFactory)
    {
        await RunRules();

        if (!this.IsSavable)
        {
            return null;
        }

        var personEntity = await personContext.Persons.FirstOrDefaultAsync(x => x.Id == this.Id);
        if (personEntity == null)
        {
            throw new KeyNotFoundException("Person not found");
        }

        this.MapModifiedTo(personEntity);

        personPhoneModelListFactory.Save(this.PersonPhoneModelList, personEntity.Phones);

        await personContext.SaveChangesAsync();
        return personEntity;
    }

    [Remote]
    [Delete]
    public async Task Delete([Service] IPersonContext personContext)
    {
        await personContext.DeleteAllPersons();
        await personContext.SaveChangesAsync();
    }
}
