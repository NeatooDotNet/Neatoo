@page "/"

@using Neatoo
@using Neatoo.Blazor
@using Person.DomainModel
@using BlazorBootstrap
@inject IPersonModelFactory PersonModelFactory
@inject IUser User

<style>
    .btn {
    margin: 5px;
    }
</style>

<div class="h3">User Role:</div>
<div class="row">
    <div class="row">
        <div class="col">
            <InputRadioGroup @bind-Value="selectedRole" class="form-check-inline">
                <div class="form-check-inline">
                    <InputRadio id="create" class="form-check-input" Value="Role.None" />
                    <label for="create" class="form-check-label">None</label>
                </div>
                <div class="form-check-inline">
                    <InputRadio id="create" class="form-check-input" Value="Role.Create" />
                    <label for="create" class="form-check-label">Create</label>
                </div>
                <div class="form-check-inline">
                    <InputRadio id="fetch" class="form-check-input" Value="Role.Fetch" />
                    <label for="fetch" class="form-check-label">Fetch</label>
                </div>
                <div class="form-check-inline">
                    <InputRadio id="save" class="form-check-input" Value="Role.Update" />
                    <label for="save" class="form-check-label">Update</label>
                </div>
                <div class="form-check-inline">
                    <InputRadio id="delete" class="form-check-input" Value="Role.Delete" />
                    <label for="delete" class="form-check-label">Delete</label>
                </div>
            </InputRadioGroup>
        </div>
    </div>
</div>

<div class="h3">Person</div>

@if (PersonModel == null)
{
    <div class="h4">
        <p>Not loaded</p>
    </div>
}
else if (!string.IsNullOrEmpty(Message))
{
    <div class="h4">
        <p>@Message</p>
    </div>
}
else
{
    <EditForm EditContext="@EditContext" onsubmit="HandleSubmit">
        <NeatooValidator />
        <ValidationSummary />

        <div>
            <PersonApp.Component.EditTextBox EditProperty="@PersonModel["FirstName"]" />
        </div>

        <div>
            <PersonApp.Component.EditTextBox EditProperty="@PersonModel["LastName"]" />
        </div>

        <div>
            <PersonApp.Component.EditTextBox EditProperty="@PersonModel["Email"]" />
        </div>

        <div>
            <div class="h4">Phone Numbers</div>
            <button type="button" class="btn btn-primary" @onclick="AddPhone">+</button>
        </div>

        @foreach (var phone in PersonModel.PersonPhoneModelList)
        {
            <div>
                <Dropdown Color="@phone[nameof(IPersonPhoneModel.PhoneType)].IsValid.ToDropdownColor()">
                    <DropdownToggleButton>@(phone.PhoneType.ToString() ?? "Phone Type")</DropdownToggleButton>
                    <DropdownMenu>
                        <DropdownItem @onclick="() => UpdatePhoneType(phone, PhoneType.Home)" Type="DropdownItemType.Button">Home</DropdownItem>
                        <DropdownItem @onclick="() => UpdatePhoneType(phone, PhoneType.Mobile)" Type="DropdownItemType.Button">Mobile</DropdownItem>
                        <DropdownItem @onclick="() => UpdatePhoneType(phone, PhoneType.Work)" Type="DropdownItemType.Button">Work</DropdownItem>
                    </DropdownMenu>
                </Dropdown>
                <PersonApp.Component.EditTextBox EditProperty="@phone[nameof(IPersonPhoneModel.PhoneNumber)]" />
                <button type="button" class="btn btn-primary" @onclick="() => RemovePhone(phone)">-</button>
            </div>
            <ValidationMessage For="@(() => @phone[nameof(IPersonPhoneModel.PhoneType)].StringValue)" class="text-danger" />
        }

        <div>
            <PersonApp.Component.EditTextBox EditProperty="@PersonModel["Notes"]" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@(PersonModel.IsBusy)">Update</button>
        <button type="button" class="btn btn-primary" @onclick="Delete" disabled="@(!CanDelete)">Delete</button>
    </EditForm>
}

<button type="button" class="btn btn-primary" @onclick="Clear">Clear</button>
<button type="button" class="btn btn-primary" @onclick="Create" disabled="@(!CanCreate)">Create</button>
<button type="button" class="btn btn-primary" @onclick="Fetch" disabled="@(!CanFetch)">Fetch</button>

@code {

    public IPersonModel? PersonModel { get; set; } = default!;
    public EditContext EditContext { get; set; } = default!;
    public string Message { get; set; } = "Not Loaded";

    private bool CanCreate { get; set; }
    private bool CanFetch { get; set; }
    private bool CanUpdate { get; set; }
    private bool CanDelete { get; set; }
    private Role _selectedRole = Role.None;
    public Role selectedRole
    {
        get => _selectedRole;
        set
        {
            _selectedRole = value;
            UserRoleChanged();
        }
    }

    [Inject(Key = Neatoo.RemoteFactory.RemoteFactoryServices.HttpClientKey)]
    private HttpClient httpClient { get; set; } = default!;

    private void Clear()
    {
        NewPersonModel(null);
    }

    private async Task Fetch()
    {
        Message = "Fetching...";
        // Fetch the person data, e.g., from a database
        NewPersonModel(await PersonModelFactory.Fetch());
        Message = string.Empty;
    }

    private async Task Create()
    {
        NewPersonModel(PersonModelFactory.Create());
        Message = string.Empty;
    }

    private void NewPersonModel(IPersonModel? personModel)
    {
        if (PersonModel != null)
        {
            PersonModel.PropertyChanged -= PersonModelPropertyChanged;
            PersonModel.NeatooPropertyChanged -= PersonModelNeatooPropertyChanged;
        }

        PersonModel = personModel;

        if (PersonModel != null)
        {
            EditContext = new EditContext(PersonModel!);
            PersonModel.PropertyChanged += PersonModelPropertyChanged;
            PersonModel.NeatooPropertyChanged += PersonModelNeatooPropertyChanged;
        }
    }

    private void PersonModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        var isSavable = PersonModel!.IsSavable;
        var messages = PersonModel!.PropertyMessages;
        if (e.PropertyName.StartsWith("Is"))
        {
            InvokeAsync(() => StateHasChanged());
            EditContext.Validate();
        }

        Console.WriteLine($"Property changed: {e.PropertyName}");
        Console.WriteLine($"IsSavable: {isSavable}");
        Console.WriteLine($"Messages: {string.Join(Environment.NewLine, messages.Select(m => m.Message))}");
    }

    private Task PersonModelNeatooPropertyChanged(NeatooPropertyChangedEventArgs eventArgs)
    {
        var isSavable = PersonModel!.IsSavable;
        var messages = PersonModel!.PropertyMessages;

        Console.WriteLine($"Neatoo Property changed: {eventArgs.FullPropertyName}");
        Console.WriteLine($"IsSavable: {isSavable}");
        Console.WriteLine($"Messages: {string.Join(Environment.NewLine, messages.Select(m => m.Message))}");

        if (eventArgs.OriginalEventArgs.Property != null)
        {
            EditContext.NotifyFieldChanged(new FieldIdentifier(eventArgs.OriginalEventArgs.Property, nameof(IEditProperty.StringValue)));
        }

        return Task.CompletedTask;
    }

    private async Task Delete()
    {
        this.PersonModel!.Delete();
        await PersonModelFactory.Save(PersonModel!);
        this.PersonModel = null;
    }

    private void UserRoleChanged()
    {
        httpClient.DefaultRequestHeaders.Remove("UserRoles");
        httpClient.DefaultRequestHeaders.Add("UserRoles", selectedRole.ToString());
        if (selectedRole == Role.None)
        {
            PersonModel = null;
        }

        User.Role = selectedRole;
        CanCreate = PersonModelFactory.CanCreate();
        CanFetch = PersonModelFactory.CanFetch();
        CanUpdate = PersonModelFactory.CanUpdate();
        CanDelete = PersonModelFactory.CanDelete();
    }

    private void AddPhone()
    {
        PersonModel!.PersonPhoneModelList.AddPhoneNumber();
    }

    private Task RemovePhone(IPersonPhoneModel personPhoneModel)
    {
        return PersonModel!.PersonPhoneModelList.RemovePhoneNumber(personPhoneModel);
    }

    private void UpdatePhoneType(IPersonPhoneModel personPhone, PhoneType phoneType)
    {
        personPhone.PhoneType = phoneType;
        EditContext.NotifyFieldChanged(new FieldIdentifier(personPhone[nameof(IPersonPhoneModel.PhoneType)], nameof(IEditProperty.StringValue)));
    }
    private async Task HandleSubmit()
    {
        if (PersonModel == null || !PersonModel.IsValid)
            return;

        Message = "Saving...";

        await PersonModel.WaitForTasks();
        await PersonModel.RunRules(RunRulesFlag.NotExecuted);

        EditContext.Validate();

        if (PersonModel.IsSavable)
        {
            NewPersonModel(await PersonModelFactory.Save(PersonModel!));
        }
        else
        {
            Message = "Not Savable";
            await Task.Delay(2000);
        }

        Message = string.Empty;
    }
}