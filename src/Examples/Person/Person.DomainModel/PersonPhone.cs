using Neatoo;
using Neatoo.RemoteFactory;
using Person.Ef;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace DomainModel;

public enum PhoneType
{
    Home,
    Work,
    Mobile
}

public partial interface IPersonPhone : IEntityBase
{
    // Additional Properties auto-generated by BaseGenerator (Roslyn)
    internal IPerson? ParentPerson { get; }
}

[Factory]
internal partial class PersonPhone : EntityBase<PersonPhone>, IPersonPhone
{
    [Create]
    public PersonPhone([Service] IUniquePhoneNumberRule uniquePhoneNumberRule,
                    [Service] IUniquePhoneTypeRule uniquePhoneTypeRule,
        [Service] IEntityBaseServices<PersonPhone> services) : base(services)
    {
        RuleManager.AddRule(uniquePhoneNumberRule);
        RuleManager.AddRule(uniquePhoneTypeRule);
    }

    public partial Guid? Id { get; set; }

    [Required(ErrorMessage = "Phone number type is required")]
    public partial PhoneType? PhoneType { get; set; }

    [DisplayName("Phone Number*")]
    [Required(ErrorMessage = "Phone number is required")]
    public partial string? PhoneNumber { get; set; }

    public IPerson? ParentPerson => this.Parent as IPerson;

    public partial void MapFrom(PersonPhoneEntity personPhoneEntity);
    public partial void MapTo(PersonPhoneEntity personPhoneEntity);
    public partial void MapModifiedTo(PersonPhoneEntity personPhoneEntity);

    [Fetch]
    public void Fetch(PersonPhoneEntity personPhoneEntity)
    {
        MapFrom(personPhoneEntity);
    }

    [Insert]
    public void Insert(PersonPhoneEntity personPhoneEntity)
    {
        this.Id = Guid.NewGuid();
        MapTo(personPhoneEntity);
    }

    [Update]
    public void Update(PersonPhoneEntity personPhoneEntity)
    {
        MapModifiedTo(personPhoneEntity);
    }
}