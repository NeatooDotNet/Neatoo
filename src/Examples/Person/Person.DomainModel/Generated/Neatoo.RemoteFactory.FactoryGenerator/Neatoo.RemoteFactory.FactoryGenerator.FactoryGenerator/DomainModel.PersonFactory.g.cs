#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo;
using Person.Ef;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace DomainModel
{
    public interface IPersonFactory
    {
        IPerson? Create();
        Task<IPerson?> Fetch();
        Task<IPerson?> Save(IPerson target);
        Task<Authorized<IPerson>> TrySave(IPerson target);
        Authorized CanCreate();
        Authorized CanFetch();
        Authorized CanInsert();
        Authorized CanUpdate();
        Authorized CanDelete();
        Authorized CanSave();
    }

    internal class PersonFactory : FactorySaveBase<IPerson>, IFactorySave<Person>, IPersonFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<Authorized<IPerson>> FetchDelegate();
        public delegate Task<Authorized<IPerson>> SaveDelegate(IPerson target);
        // Delegate Properties to provide Local or Remote fork in execution
        public FetchDelegate FetchProperty { get; }
        public SaveDelegate SaveProperty { get; }

        public PersonFactory(IServiceProvider serviceProvider, IFactoryCore<IPerson> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            FetchProperty = LocalFetch;
            SaveProperty = LocalSave;
        }

        public PersonFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IPerson> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
            FetchProperty = RemoteFetch;
            SaveProperty = RemoteSave;
        }

        public virtual IPerson? Create()
        {
            return (LocalCreate()).Result;
        }

        public Authorized<IPerson> LocalCreate()
        {
            Authorized authorized;
            IPersonAuth ipersonauth = ServiceProvider.GetRequiredService<IPersonAuth>();
            authorized = ipersonauth.HasAccess();
            if (!authorized.HasAccess)
            {
                return new Authorized<IPerson>(authorized);
            }

            authorized = ipersonauth.HasCreate();
            if (!authorized.HasAccess)
            {
                return new Authorized<IPerson>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<Person>();
            var personPhoneModelList = ServiceProvider.GetRequiredService<IPersonPhoneList>();
            return new Authorized<IPerson>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.Create(personPhoneModelList)));
        }

        public virtual async Task<IPerson?> Fetch()
        {
            return (await FetchProperty()).Result;
        }

        public virtual async Task<Authorized<IPerson>> RemoteFetch()
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<IPerson>>(typeof(FetchDelegate), []))!;
        }

        public async Task<Authorized<IPerson>> LocalFetch()
        {
            Authorized authorized;
            IPersonAuth ipersonauth = ServiceProvider.GetRequiredService<IPersonAuth>();
            authorized = ipersonauth.HasAccess();
            if (!authorized.HasAccess)
            {
                return new Authorized<IPerson>(authorized);
            }

            authorized = ipersonauth.HasFetch();
            if (!authorized.HasAccess)
            {
                return new Authorized<IPerson>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<Person>();
            var personContext = ServiceProvider.GetRequiredService<IPersonDbContext>();
            var personPhoneModelListFactory = ServiceProvider.GetRequiredService<IPersonPhoneListFactory>();
            return new Authorized<IPerson>(await DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.Fetch(personContext, personPhoneModelListFactory)));
        }

        public async Task<Authorized<IPerson>> LocalInsert(IPerson target)
        {
            Authorized authorized;
            IPersonAuth ipersonauth = ServiceProvider.GetRequiredService<IPersonAuth>();
            authorized = ipersonauth.HasAccess();
            if (!authorized.HasAccess)
            {
                return new Authorized<IPerson>(authorized);
            }

            authorized = ipersonauth.HasInsert();
            if (!authorized.HasAccess)
            {
                return new Authorized<IPerson>(authorized);
            }

            var cTarget = (Person)target ?? throw new Exception("IPerson must implement Person");
            var personContext = ServiceProvider.GetRequiredService<IPersonDbContext>();
            var personPhoneModelListFactory = ServiceProvider.GetRequiredService<IPersonPhoneListFactory>();
            return new Authorized<IPerson>(await DoFactoryMethodCallAsync(cTarget, FactoryOperation.Insert, () => cTarget.Insert(personContext, personPhoneModelListFactory)));
        }

        public async Task<Authorized<IPerson>> LocalUpdate(IPerson target)
        {
            Authorized authorized;
            IPersonAuth ipersonauth = ServiceProvider.GetRequiredService<IPersonAuth>();
            authorized = ipersonauth.HasAccess();
            if (!authorized.HasAccess)
            {
                return new Authorized<IPerson>(authorized);
            }

            authorized = ipersonauth.HasUpdate();
            if (!authorized.HasAccess)
            {
                return new Authorized<IPerson>(authorized);
            }

            var cTarget = (Person)target ?? throw new Exception("IPerson must implement Person");
            var personContext = ServiceProvider.GetRequiredService<IPersonDbContext>();
            var personPhoneModelListFactory = ServiceProvider.GetRequiredService<IPersonPhoneListFactory>();
            return new Authorized<IPerson>(await DoFactoryMethodCallAsync(cTarget, FactoryOperation.Update, () => cTarget.Update(personContext, personPhoneModelListFactory)));
        }

        public async Task<Authorized<IPerson>> LocalDelete(IPerson target)
        {
            Authorized authorized;
            IPersonAuth ipersonauth = ServiceProvider.GetRequiredService<IPersonAuth>();
            authorized = ipersonauth.HasAccess();
            if (!authorized.HasAccess)
            {
                return new Authorized<IPerson>(authorized);
            }

            authorized = ipersonauth.HasDelete();
            if (!authorized.HasAccess)
            {
                return new Authorized<IPerson>(authorized);
            }

            var cTarget = (Person)target ?? throw new Exception("IPerson must implement Person");
            var personContext = ServiceProvider.GetRequiredService<IPersonDbContext>();
            return new Authorized<IPerson>(await DoFactoryMethodCallAsync(cTarget, FactoryOperation.Delete, () => cTarget.Delete(personContext)));
        }

        public virtual async Task<IPerson?> Save(IPerson target)
        {
            var authorized = (await SaveProperty(target));
            if (!authorized.HasAccess)
            {
                throw new NotAuthorizedException(authorized);
            }

            return authorized.Result;
        }

        public virtual async Task<Authorized<IPerson>> TrySave(IPerson target)
        {
            return await SaveProperty(target);
        }

        public virtual async Task<Authorized<IPerson>> RemoteSave(IPerson target)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<Authorized<IPerson>>(typeof(SaveDelegate), [target]))!;
        }

        async Task<IFactorySaveMeta?> IFactorySave<Person>.Save(Person target)
        {
            return (IFactorySaveMeta? )await Save(target);
        }

        public virtual async Task<Authorized<IPerson>> LocalSave(IPerson target)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return new Authorized<IPerson>();
                }

                return await LocalDelete(target);
            }
            else if (target.IsNew)
            {
                return await LocalInsert(target);
            }
            else
            {
                return await LocalUpdate(target);
            }
        }

        public virtual Authorized CanCreate()
        {
            return LocalCanCreate();
        }

        public Authorized LocalCanCreate()
        {
            Authorized authorized;
            IPersonAuth ipersonauth = ServiceProvider.GetRequiredService<IPersonAuth>();
            authorized = ipersonauth.HasAccess();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = ipersonauth.HasCreate();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanFetch()
        {
            return LocalCanFetch();
        }

        public Authorized LocalCanFetch()
        {
            Authorized authorized;
            IPersonAuth ipersonauth = ServiceProvider.GetRequiredService<IPersonAuth>();
            authorized = ipersonauth.HasAccess();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = ipersonauth.HasFetch();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanInsert()
        {
            return LocalCanInsert();
        }

        public Authorized LocalCanInsert()
        {
            Authorized authorized;
            IPersonAuth ipersonauth = ServiceProvider.GetRequiredService<IPersonAuth>();
            authorized = ipersonauth.HasAccess();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = ipersonauth.HasInsert();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanUpdate()
        {
            return LocalCanUpdate();
        }

        public Authorized LocalCanUpdate()
        {
            Authorized authorized;
            IPersonAuth ipersonauth = ServiceProvider.GetRequiredService<IPersonAuth>();
            authorized = ipersonauth.HasAccess();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = ipersonauth.HasUpdate();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanDelete()
        {
            return LocalCanDelete();
        }

        public Authorized LocalCanDelete()
        {
            Authorized authorized;
            IPersonAuth ipersonauth = ServiceProvider.GetRequiredService<IPersonAuth>();
            authorized = ipersonauth.HasAccess();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = ipersonauth.HasDelete();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public virtual Authorized CanSave()
        {
            return LocalCanSave();
        }

        public Authorized LocalCanSave()
        {
            Authorized authorized;
            IPersonAuth ipersonauth = ServiceProvider.GetRequiredService<IPersonAuth>();
            authorized = ipersonauth.HasAccess();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = ipersonauth.HasUpdate();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = ipersonauth.HasInsert();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            authorized = ipersonauth.HasDelete();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<PersonFactory>();
            services.AddScoped<IPersonFactory, PersonFactory>();
            services.AddScoped<FetchDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<PersonFactory>();
                return () => factory.LocalFetch();
            });
            services.AddScoped<SaveDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<PersonFactory>();
                return (IPerson target) => factory.LocalSave(target);
            });
            services.AddTransient<Person>();
            services.AddTransient<IPerson, Person>();
            services.AddScoped<IFactorySave<Person>, PersonFactory>();
        }
    }
}