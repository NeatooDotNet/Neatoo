#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo;
using Person.Ef;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace DomainModel
{
    public interface IPersonPhoneListFactory
    {
        IPersonPhoneList Fetch(IEnumerable<PersonPhoneEntity> personPhoneEntities);
        IPersonPhoneList Save(IPersonPhoneList target, ICollection<PersonPhoneEntity> personPhoneEntities);
    }

    internal class PersonPhoneListFactory : FactoryBase<IPersonPhoneList>, IPersonPhoneListFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        // Delegate Properties to provide Local or Remote fork in execution
        public PersonPhoneListFactory(IServiceProvider serviceProvider, IFactoryCore<IPersonPhoneList> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public PersonPhoneListFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IPersonPhoneList> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual IPersonPhoneList Fetch(IEnumerable<PersonPhoneEntity> personPhoneEntities)
        {
            return LocalFetch(personPhoneEntities);
        }

        public IPersonPhoneList LocalFetch(IEnumerable<PersonPhoneEntity> personPhoneEntities)
        {
            var target = ServiceProvider.GetRequiredService<PersonPhoneList>();
            var personPhoneModelFactory = ServiceProvider.GetRequiredService<IPersonPhoneFactory>();
            return DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.Fetch(personPhoneEntities, personPhoneModelFactory));
        }

        public IPersonPhoneList LocalUpdate(IPersonPhoneList target, ICollection<PersonPhoneEntity> personPhoneEntities)
        {
            var cTarget = (PersonPhoneList)target ?? throw new Exception("IPersonPhoneList must implement PersonPhoneList");
            var personPhoneModelFactory = ServiceProvider.GetRequiredService<IPersonPhoneFactory>();
            return DoFactoryMethodCall(cTarget, FactoryOperation.Update, () => cTarget.Update(personPhoneEntities, personPhoneModelFactory));
        }

        public virtual IPersonPhoneList Save(IPersonPhoneList target, ICollection<PersonPhoneEntity> personPhoneEntities)
        {
            return LocalSave(target, personPhoneEntities);
        }

        public virtual IPersonPhoneList LocalSave(IPersonPhoneList target, ICollection<PersonPhoneEntity> personPhoneEntities)
        {
            if (target.IsDeleted)
            {
                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                throw new NotImplementedException();
            }
            else
            {
                return LocalUpdate(target, personPhoneEntities);
            }
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<PersonPhoneListFactory>();
            services.AddScoped<IPersonPhoneListFactory, PersonPhoneListFactory>();
            services.AddTransient<PersonPhoneList>();
            services.AddTransient<IPersonPhoneList, PersonPhoneList>();
        }
    }
}