#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Neatoo.UnitTest.PersonObjects;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.UnitTest.ValidateBaseTests
{
    public interface IValidateObjectFactory
    {
        Task<IValidateObject> Fetch(PersonDto person);
    }

    internal class ValidateObjectFactory : FactoryBase<IValidateObject>, IValidateObjectFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        // Delegate Properties to provide Local or Remote fork in execution
        public ValidateObjectFactory(IServiceProvider serviceProvider, IFactoryCore<IValidateObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public ValidateObjectFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IValidateObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual Task<IValidateObject> Fetch(PersonDto person)
        {
            return LocalFetch(person);
        }

        public Task<IValidateObject> LocalFetch(PersonDto person)
        {
            var target = ServiceProvider.GetRequiredService<ValidateObject>();
            var portal = ServiceProvider.GetRequiredService<IValidateObjectFactory>();
            var personTable = ServiceProvider.GetRequiredService<IReadOnlyList<PersonDto>>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.Fetch(person, portal, personTable));
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<ValidateObjectFactory>();
            services.AddScoped<IValidateObjectFactory, ValidateObjectFactory>();
            services.AddTransient<ValidateObject>();
            services.AddTransient<IValidateObject, ValidateObject>();
        }
    }
}