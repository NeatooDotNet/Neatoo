#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Neatoo.UnitTest.Objects;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.UnitTest.RemoteFactory
{
    public interface IEntityObjectFactory
    {
        IEntityObject Create();
        Task<IEntityObject> CreateAsync(int criteria);
        IEntityObject Create(Guid criteria);
        Task<IEntityObject> CreateRemote(Guid criteria);
        IEntityObject Fetch();
        Task<IEntityObject> Fetch(int criteria);
        IEntityObject Fetch(Guid criteria);
        Task<IEntityObject> FetchRemote(Guid criteria);
        IEntityObject? FetchFail();
        Task<IEntityObject?> FetchFailAsync();
        Task<IEntityObject?> FetchFailDependency();
        Task<IEntityObject?> FetchFailAsyncDependency();
        Task<IEntityObject?> Save(IEntityObject target);
        Task<IEntityObject?> Save(IEntityObject target, int criteriaA);
        Task<IEntityObject?> Save(IEntityObject target, Guid criteria);
    }

    internal class EntityObjectFactory : FactorySaveBase<IEntityObject>, IFactorySave<EntityObject>, IEntityObjectFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        public delegate Task<IEntityObject> CreateRemoteDelegate(Guid criteria);
        public delegate Task<IEntityObject> FetchRemoteDelegate(Guid criteria);
        public delegate Task<IEntityObject?> FetchFailDependencyDelegate();
        public delegate Task<IEntityObject?> FetchFailAsyncDependencyDelegate();
        public delegate Task<IEntityObject?> Save2Delegate(IEntityObject target, Guid criteria);
        // Delegate Properties to provide Local or Remote fork in execution
        public CreateRemoteDelegate CreateRemoteProperty { get; }
        public FetchRemoteDelegate FetchRemoteProperty { get; }
        public FetchFailDependencyDelegate FetchFailDependencyProperty { get; }
        public FetchFailAsyncDependencyDelegate FetchFailAsyncDependencyProperty { get; }
        public Save2Delegate Save2Property { get; }

        public EntityObjectFactory(IServiceProvider serviceProvider, IFactoryCore<IEntityObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            CreateRemoteProperty = LocalCreateRemote;
            FetchRemoteProperty = LocalFetchRemote;
            FetchFailDependencyProperty = LocalFetchFailDependency;
            FetchFailAsyncDependencyProperty = LocalFetchFailAsyncDependency;
            Save2Property = LocalSave2;
        }

        public EntityObjectFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IEntityObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
            CreateRemoteProperty = RemoteCreateRemote;
            FetchRemoteProperty = RemoteFetchRemote;
            FetchFailDependencyProperty = RemoteFetchFailDependency;
            FetchFailAsyncDependencyProperty = RemoteFetchFailAsyncDependency;
            Save2Property = RemoteSave2;
        }

        public virtual IEntityObject Create()
        {
            return LocalCreate();
        }

        public IEntityObject LocalCreate()
        {
            var baseServices = ServiceProvider.GetRequiredService<IEntityBaseServices<EntityObject>>();
            return DoFactoryMethodCall(FactoryOperation.Create, () => new EntityObject(baseServices));
        }

        public virtual Task<IEntityObject> CreateAsync(int criteria)
        {
            return LocalCreateAsync(criteria);
        }

        public Task<IEntityObject> LocalCreateAsync(int criteria)
        {
            var target = ServiceProvider.GetRequiredService<EntityObject>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.CreateAsync(criteria));
        }

        public virtual IEntityObject Create(Guid criteria)
        {
            return LocalCreate1(criteria);
        }

        public IEntityObject LocalCreate1(Guid criteria)
        {
            var target = ServiceProvider.GetRequiredService<EntityObject>();
            var dependency = ServiceProvider.GetRequiredService<IDisposableDependency>();
            return DoFactoryMethodCall(target, FactoryOperation.Create, () => target.Create(criteria, dependency));
        }

        public virtual Task<IEntityObject> CreateRemote(Guid criteria)
        {
            return CreateRemoteProperty(criteria);
        }

        public virtual async Task<IEntityObject> RemoteCreateRemote(Guid criteria)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<IEntityObject>(typeof(CreateRemoteDelegate), [criteria]))!;
        }

        public Task<IEntityObject> LocalCreateRemote(Guid criteria)
        {
            var target = ServiceProvider.GetRequiredService<EntityObject>();
            var dependency = ServiceProvider.GetRequiredService<IDisposableDependency>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.CreateRemote(criteria, dependency)));
        }

        public virtual IEntityObject Fetch()
        {
            return LocalFetch();
        }

        public IEntityObject LocalFetch()
        {
            var target = ServiceProvider.GetRequiredService<EntityObject>();
            return DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.Fetch());
        }

        public virtual Task<IEntityObject> Fetch(int criteria)
        {
            return LocalFetch1(criteria);
        }

        public Task<IEntityObject> LocalFetch1(int criteria)
        {
            var target = ServiceProvider.GetRequiredService<EntityObject>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Fetch, () => target.Fetch(criteria));
        }

        public virtual IEntityObject Fetch(Guid criteria)
        {
            return LocalFetch2(criteria);
        }

        public IEntityObject LocalFetch2(Guid criteria)
        {
            var target = ServiceProvider.GetRequiredService<EntityObject>();
            var dependency = ServiceProvider.GetRequiredService<IDisposableDependency>();
            return DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.Fetch(criteria, dependency));
        }

        public virtual Task<IEntityObject> FetchRemote(Guid criteria)
        {
            return FetchRemoteProperty(criteria);
        }

        public virtual async Task<IEntityObject> RemoteFetchRemote(Guid criteria)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegate<IEntityObject>(typeof(FetchRemoteDelegate), [criteria]))!;
        }

        public Task<IEntityObject> LocalFetchRemote(Guid criteria)
        {
            var target = ServiceProvider.GetRequiredService<EntityObject>();
            var dependency = ServiceProvider.GetRequiredService<IDisposableDependency>();
            return Task.FromResult(DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.FetchRemote(criteria, dependency)));
        }

        public virtual IEntityObject? FetchFail()
        {
            return LocalFetchFail();
        }

        public IEntityObject? LocalFetchFail()
        {
            var target = ServiceProvider.GetRequiredService<EntityObject>();
            return DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchFail());
        }

        public virtual Task<IEntityObject?> FetchFailAsync()
        {
            return LocalFetchFailAsync();
        }

        public Task<IEntityObject?> LocalFetchFailAsync()
        {
            var target = ServiceProvider.GetRequiredService<EntityObject>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchFailAsync());
        }

        public virtual Task<IEntityObject?> FetchFailDependency()
        {
            return FetchFailDependencyProperty();
        }

        public virtual async Task<IEntityObject?> RemoteFetchFailDependency()
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<IEntityObject?>(typeof(FetchFailDependencyDelegate), []))!;
        }

        public Task<IEntityObject?> LocalFetchFailDependency()
        {
            var target = ServiceProvider.GetRequiredService<EntityObject>();
            var dependency = ServiceProvider.GetRequiredService<IDisposableDependency>();
            return Task.FromResult(DoFactoryMethodCallBool(target, FactoryOperation.Fetch, () => target.FetchFailDependency(dependency)));
        }

        public virtual Task<IEntityObject?> FetchFailAsyncDependency()
        {
            return FetchFailAsyncDependencyProperty();
        }

        public virtual async Task<IEntityObject?> RemoteFetchFailAsyncDependency()
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<IEntityObject?>(typeof(FetchFailAsyncDependencyDelegate), []))!;
        }

        public Task<IEntityObject?> LocalFetchFailAsyncDependency()
        {
            var target = ServiceProvider.GetRequiredService<EntityObject>();
            var dependency = ServiceProvider.GetRequiredService<IDisposableDependency>();
            return DoFactoryMethodCallBoolAsync(target, FactoryOperation.Fetch, () => target.FetchFailAsyncDependency(dependency));
        }

        public IEntityObject LocalInsert(IEntityObject target)
        {
            var cTarget = (EntityObject)target ?? throw new Exception("IEntityObject must implement EntityObject");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Insert, () => cTarget.Insert());
        }

        public Task<IEntityObject> LocalInsert1(IEntityObject target, int criteriaA)
        {
            var cTarget = (EntityObject)target ?? throw new Exception("IEntityObject must implement EntityObject");
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Insert, () => cTarget.Insert(criteriaA));
        }

        public IEntityObject LocalInsert2(IEntityObject target, Guid criteria)
        {
            var cTarget = (EntityObject)target ?? throw new Exception("IEntityObject must implement EntityObject");
            var dependency = ServiceProvider.GetRequiredService<IDisposableDependency>();
            return DoFactoryMethodCall(cTarget, FactoryOperation.Insert, () => cTarget.Insert(criteria, dependency));
        }

        public Task<IEntityObject> LocalUpdate(IEntityObject target)
        {
            var cTarget = (EntityObject)target ?? throw new Exception("IEntityObject must implement EntityObject");
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Update, () => cTarget.Update());
        }

        public Task<IEntityObject> LocalUpdate1(IEntityObject target, int criteriaB)
        {
            var cTarget = (EntityObject)target ?? throw new Exception("IEntityObject must implement EntityObject");
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Update, () => cTarget.Update(criteriaB));
        }

        public Task<IEntityObject> LocalUpdate2(IEntityObject target, Guid criteria)
        {
            var cTarget = (EntityObject)target ?? throw new Exception("IEntityObject must implement EntityObject");
            var dependency = ServiceProvider.GetRequiredService<IDisposableDependency>();
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Update, () => cTarget.Update(criteria, dependency));
        }

        public IEntityObject LocalDelete(IEntityObject target)
        {
            var cTarget = (EntityObject)target ?? throw new Exception("IEntityObject must implement EntityObject");
            return DoFactoryMethodCall(cTarget, FactoryOperation.Delete, () => cTarget.Delete());
        }

        public Task<IEntityObject> LocalDelete1(IEntityObject target, int criteriaC)
        {
            var cTarget = (EntityObject)target ?? throw new Exception("IEntityObject must implement EntityObject");
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Delete, () => cTarget.Delete(criteriaC));
        }

        public IEntityObject LocalDelete2(IEntityObject target, Guid criteria)
        {
            var cTarget = (EntityObject)target ?? throw new Exception("IEntityObject must implement EntityObject");
            var dependency = ServiceProvider.GetRequiredService<IDisposableDependency>();
            return DoFactoryMethodCall(cTarget, FactoryOperation.Delete, () => cTarget.Delete(criteria, dependency));
        }

        public virtual Task<IEntityObject?> Save(IEntityObject target)
        {
            return LocalSave(target);
        }

        async Task<IFactorySaveMeta?> IFactorySave<EntityObject>.Save(EntityObject target)
        {
            return (IFactorySaveMeta? )await Save(target);
        }

        public virtual async Task<IEntityObject?> LocalSave(IEntityObject target)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return default(IEntityObject);
                }

                return LocalDelete(target);
            }
            else if (target.IsNew)
            {
                return LocalInsert(target);
            }
            else
            {
                return await LocalUpdate(target);
            }
        }

        public virtual Task<IEntityObject?> Save(IEntityObject target, int criteriaA)
        {
            return LocalSave1(target, criteriaA);
        }

        public virtual async Task<IEntityObject?> LocalSave1(IEntityObject target, int criteriaA)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return default(IEntityObject);
                }

                return await LocalDelete1(target, criteriaA);
            }
            else if (target.IsNew)
            {
                return await LocalInsert1(target, criteriaA);
            }
            else
            {
                return await LocalUpdate1(target, criteriaA);
            }
        }

        public virtual Task<IEntityObject?> Save(IEntityObject target, Guid criteria)
        {
            return Save2Property(target, criteria);
        }

        public virtual async Task<IEntityObject?> RemoteSave2(IEntityObject target, Guid criteria)
        {
            return (await MakeRemoteDelegateRequest!.ForDelegateNullable<IEntityObject?>(typeof(Save2Delegate), [target, criteria]))!;
        }

        public virtual async Task<IEntityObject?> LocalSave2(IEntityObject target, Guid criteria)
        {
            if (target.IsDeleted)
            {
                if (target.IsNew)
                {
                    return default(IEntityObject);
                }

                return LocalDelete2(target, criteria);
            }
            else if (target.IsNew)
            {
                return LocalInsert2(target, criteria);
            }
            else
            {
                return await LocalUpdate2(target, criteria);
            }
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<EntityObjectFactory>();
            services.AddScoped<IEntityObjectFactory, EntityObjectFactory>();
            services.AddScoped<CreateRemoteDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<EntityObjectFactory>();
                return (Guid criteria) => factory.LocalCreateRemote(criteria);
            });
            services.AddScoped<FetchRemoteDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<EntityObjectFactory>();
                return (Guid criteria) => factory.LocalFetchRemote(criteria);
            });
            services.AddScoped<FetchFailDependencyDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<EntityObjectFactory>();
                return () => factory.LocalFetchFailDependency();
            });
            services.AddScoped<FetchFailAsyncDependencyDelegate>(cc =>
            {
                var factory = cc.GetRequiredService<EntityObjectFactory>();
                return () => factory.LocalFetchFailAsyncDependency();
            });
            services.AddScoped<Save2Delegate>(cc =>
            {
                var factory = cc.GetRequiredService<EntityObjectFactory>();
                return (IEntityObject target, Guid criteria) => factory.LocalSave2(target, criteria);
            });
            services.AddTransient<EntityObject>();
            services.AddTransient<IEntityObject, EntityObject>();
            services.AddScoped<IFactorySave<EntityObject>, EntityObjectFactory>();
        }
    }
}