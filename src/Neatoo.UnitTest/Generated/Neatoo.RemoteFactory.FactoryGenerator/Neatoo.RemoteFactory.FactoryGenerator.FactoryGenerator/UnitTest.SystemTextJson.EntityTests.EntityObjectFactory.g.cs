#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.UnitTest.SystemTextJson.EntityTests
{
    public interface IEntityObjectFactory
    {
        Task<IEntityObject> Create(Guid ID, string Name);
        Task<IEntityObject> Save(IEntityObject target);
    }

    internal class EntityObjectFactory : FactorySaveBase<IEntityObject>, IFactorySave<EntityObject>, IEntityObjectFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        // Delegate Properties to provide Local or Remote fork in execution
        public EntityObjectFactory(IServiceProvider serviceProvider, IFactoryCore<IEntityObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public EntityObjectFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IEntityObject> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual Task<IEntityObject> Create(Guid ID, string Name)
        {
            return LocalCreate(ID, Name);
        }

        public Task<IEntityObject> LocalCreate(Guid ID, string Name)
        {
            var target = ServiceProvider.GetRequiredService<EntityObject>();
            return DoFactoryMethodCallAsync(target, FactoryOperation.Create, () => target.Create(ID, Name));
        }

        public Task<IEntityObject> LocalUpdate(IEntityObject target)
        {
            var cTarget = (EntityObject)target ?? throw new Exception("IEntityObject must implement EntityObject");
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Update, () => cTarget.Update());
        }

        public Task<IEntityObject> LocalUpdate1(IEntityObject target)
        {
            var cTarget = (EntityObject)target ?? throw new Exception("IEntityObject must implement EntityObject");
            return DoFactoryMethodCallAsync(cTarget, FactoryOperation.Insert, () => cTarget.Update());
        }

        public virtual Task<IEntityObject> Save(IEntityObject target)
        {
            return LocalSave(target);
        }

        async Task<IFactorySaveMeta?> IFactorySave<EntityObject>.Save(EntityObject target)
        {
            return (IFactorySaveMeta? )await Save(target);
        }

        public virtual async Task<IEntityObject> LocalSave(IEntityObject target)
        {
            if (target.IsDeleted)
            {
                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                return await LocalUpdate1(target);
            }
            else
            {
                return await LocalUpdate(target);
            }
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<EntityObjectFactory>();
            services.AddScoped<IEntityObjectFactory, EntityObjectFactory>();
            services.AddTransient<EntityObject>();
            services.AddTransient<IEntityObject, EntityObject>();
            services.AddScoped<IFactorySave<EntityObject>, EntityObjectFactory>();
        }
    }
}