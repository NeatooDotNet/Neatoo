#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Neatoo;
using Neatoo.Internal;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.Design;
using System.Linq;
using System.Net.WebSockets;
using System.Security.Claims;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.UnitTest.Performance
{
    public interface INeatooEntityBaseFactory
    {
        NeatooEntityBase? Create();
        NeatooEntityBase? Create(int id);
        Authorized CanCreate();
    }

    internal class NeatooEntityBaseFactory : FactoryBase<NeatooEntityBase>, INeatooEntityBaseFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        // Delegate Properties to provide Local or Remote fork in execution
        public NeatooEntityBaseFactory(IServiceProvider serviceProvider, IFactoryCore<NeatooEntityBase> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public NeatooEntityBaseFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<NeatooEntityBase> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual NeatooEntityBase? Create()
        {
            return (LocalCreate()).Result;
        }

        public Authorized<NeatooEntityBase> LocalCreate()
        {
            Authorized authorized;
            NeatooEntityBaseAuth neatooentitybaseauth = ServiceProvider.GetRequiredService<NeatooEntityBaseAuth>();
            authorized = neatooentitybaseauth.CanCreate();
            if (!authorized.HasAccess)
            {
                return new Authorized<NeatooEntityBase>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<NeatooEntityBase>();
            var factory = ServiceProvider.GetRequiredService<INeatooEntityBaseFactory>();
            return new Authorized<NeatooEntityBase>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.Create(factory)));
        }

        public virtual NeatooEntityBase? Create(int id)
        {
            return (LocalCreate1(id)).Result;
        }

        public Authorized<NeatooEntityBase> LocalCreate1(int id)
        {
            Authorized authorized;
            NeatooEntityBaseAuth neatooentitybaseauth = ServiceProvider.GetRequiredService<NeatooEntityBaseAuth>();
            authorized = neatooentitybaseauth.CanCreate();
            if (!authorized.HasAccess)
            {
                return new Authorized<NeatooEntityBase>(authorized);
            }

            var target = ServiceProvider.GetRequiredService<NeatooEntityBase>();
            var factory = ServiceProvider.GetRequiredService<INeatooEntityBaseFactory>();
            return new Authorized<NeatooEntityBase>(DoFactoryMethodCall(target, FactoryOperation.Create, () => target.Create(id, factory)));
        }

        public virtual Authorized CanCreate()
        {
            return LocalCanCreate();
        }

        public Authorized LocalCanCreate()
        {
            Authorized authorized;
            NeatooEntityBaseAuth neatooentitybaseauth = ServiceProvider.GetRequiredService<NeatooEntityBaseAuth>();
            authorized = neatooentitybaseauth.CanCreate();
            if (!authorized.HasAccess)
            {
                return authorized;
            }

            return new Authorized(true);
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<NeatooEntityBaseFactory>();
            services.AddScoped<INeatooEntityBaseFactory, NeatooEntityBaseFactory>();
            services.AddTransient<NeatooEntityBase>();
        }
    }
}