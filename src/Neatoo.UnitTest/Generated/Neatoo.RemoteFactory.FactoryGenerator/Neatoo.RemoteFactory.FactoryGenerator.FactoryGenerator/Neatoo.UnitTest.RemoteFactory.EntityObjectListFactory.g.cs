#nullable enable
using Neatoo.RemoteFactory;
using Neatoo.RemoteFactory.Internal;
using Microsoft.Extensions.DependencyInjection;

/*
							READONLY - DO NOT EDIT!!!!
							Generated by Neatoo.RemoteFactory
*/
namespace Neatoo.UnitTest.RemoteFactory
{
    public interface IEntityObjectListFactory
    {
        IEntityObjectList Fetch();
        IEntityObjectList Save(IEntityObjectList target);
    }

    internal class EntityObjectListFactory : FactorySaveBase<IEntityObjectList>, IFactorySave<EntityObjectList>, IEntityObjectListFactory
    {
        private readonly IServiceProvider ServiceProvider;
        private readonly IMakeRemoteDelegateRequest? MakeRemoteDelegateRequest;
        // Delegates
        // Delegate Properties to provide Local or Remote fork in execution
        public EntityObjectListFactory(IServiceProvider serviceProvider, IFactoryCore<IEntityObjectList> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
        }

        public EntityObjectListFactory(IServiceProvider serviceProvider, IMakeRemoteDelegateRequest remoteMethodDelegate, IFactoryCore<IEntityObjectList> factoryCore) : base(factoryCore)
        {
            this.ServiceProvider = serviceProvider;
            this.MakeRemoteDelegateRequest = remoteMethodDelegate;
        }

        public virtual IEntityObjectList Fetch()
        {
            return LocalFetch();
        }

        public IEntityObjectList LocalFetch()
        {
            var target = ServiceProvider.GetRequiredService<EntityObjectList>();
            var editObjectFactory = ServiceProvider.GetRequiredService<IEntityObjectFactory>();
            return DoFactoryMethodCall(target, FactoryOperation.Fetch, () => target.Fetch(editObjectFactory));
        }

        public IEntityObjectList LocalUpdate(IEntityObjectList target)
        {
            var cTarget = (EntityObjectList)target ?? throw new Exception("IEntityObjectList must implement EntityObjectList");
            var editObjectFactory = ServiceProvider.GetRequiredService<IEntityObjectFactory>();
            return DoFactoryMethodCall(cTarget, FactoryOperation.Update, () => cTarget.Update(editObjectFactory));
        }

        public virtual IEntityObjectList Save(IEntityObjectList target)
        {
            return LocalSave(target);
        }

        async Task<IFactorySaveMeta?> IFactorySave<EntityObjectList>.Save(EntityObjectList target)
        {
            return await Task.FromResult((IFactorySaveMeta? )Save(target));
        }

        public virtual IEntityObjectList LocalSave(IEntityObjectList target)
        {
            if (target.IsDeleted)
            {
                throw new NotImplementedException();
            }
            else if (target.IsNew)
            {
                throw new NotImplementedException();
            }
            else
            {
                return LocalUpdate(target);
            }
        }

        public static void FactoryServiceRegistrar(IServiceCollection services, NeatooFactory remoteLocal)
        {
            services.AddScoped<EntityObjectListFactory>();
            services.AddScoped<IEntityObjectListFactory, EntityObjectListFactory>();
            services.AddTransient<EntityObjectList>();
            services.AddTransient<IEntityObjectList, EntityObjectList>();
            services.AddScoped<IFactorySave<EntityObjectList>, EntityObjectListFactory>();
        }
    }
}